{"version":3,"file":"static/js/485.a5d9b558.chunk.js","mappings":"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","sources":["components/Chart/Chart.styled.js","components/Chart/Chart.jsx","components/StatisticsDashboard/StatisticsDashboard.styled.js","components/StatisticsDashboard/StatisticsDashboard.jsx","components/StatisticsTable/StatisticsTable.styled.js","components/StatisticsTable/StatisticsTable.jsx","pages/StatisticsTab/StatisticsTab.styled.js","pages/StatisticsTab/StatisticsTab.jsx","redux/transactions/selectors.js"],"sourcesContent":["import styled from 'styled-components';\nexport const ChartP = styled.p`\n  position: absolute;\n  left: 105px;\n  top: 203px;\n  color: var(--white, #fbfbfb);\n  text-align: center;\n  font-family: Poppins;\n  font-size: 18px;\n  font-style: normal;\n  font-weight: 600;\n  line-height: normal;\n`;\n","import React from 'react';\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';\nimport { Doughnut } from 'react-chartjs-2';\nimport pngwing from '../StatisticsTable/pngwing.com (8).png';\nimport { ChartP } from './Chart.styled';\nimport { selectPeriodTotal } from 'redux/transactions/selectors';\nimport { useSelector } from 'react-redux';\nChartJS.register(ArcElement, Tooltip, Legend);\nconst Chart = ({ dataDoughnut, categories }) => {\n  const periodTotal = useSelector(selectPeriodTotal);\n  return (\n    <div\n      style={{\n        width: '288px',\n        height: '288px',\n        marginTop: '20px',\n      }}\n    >\n      {categories.length > 1 ? (\n        <>\n          <Doughnut data={dataDoughnut} />\n          <ChartP>â‚´{periodTotal}</ChartP>\n        </>\n      ) : (\n        <img src={pngwing} alt=\"fff\" />\n      )}\n    </div>\n  );\n};\n\nexport default Chart;\n","import styled from 'styled-components';\n\nexport const SelectBtn = styled.button`\n  background-color: transparent;\n  color: white;\n  height: 50px;\n  padding: 12px 20px;\n  font-size: 16px;\n  min-width: 181px;\n  border-radius: 8px;\n  display: flex;\n  font-family: Poppins;\n  font-weight: 400;\n  justify-content: space-between;\n  max-width: 160px;\n  align-items: stretch;\n  border: 1px solid rgba(255, 255, 255, 0.6);\n  position: relative;\n`;\nexport const SelectSvg = styled.svg`\n  position: absolute;\n  width: 23px;\n  height: 23px;\n  right: 20px;\n  top: 10px;\n`;\n\nexport const Options = styled.button`\n  padding: 6px 20px;\n  display: block;\n  width: 100%;\n  text-align: left;\n  border: none;\n  color: white;\n  font-size: inherit;\n  font-family: inherit;\n  background-color: transparent;\n  margin: 0;\n  position: relative;\n  &:hover {\n    background-color: rgba(255, 255, 255, 0.1);\n    color: #ff868d;\n  }\n`;\n","import React, { useEffect, useMemo, useState } from 'react';\nimport { SelectBtn, Options, SelectSvg } from './StatisticsDashboard.styled';\nimport { Scrollbars } from 'react-custom-scrollbars-2';\nimport sprite from '../../images/sprite.svg';\nimport { useDispatch } from 'react-redux';\nimport { fetchTransactionsSummary } from 'redux/transactions/operations';\n\nconst StatisticsDashboard = ({\n  isOpen,\n  setIsOpen,\n  isOpenYear,\n  setIsOpenYear,\n}) => {\n  const dispatch = useDispatch();\n  const [selectedMonth, setSelectedMonth] = useState('January');\n  const [selectedYear, setSelectedYear] = useState(2023);\n\n  console.log('rerender');\n  const onMonthClick = month => {\n    setSelectedMonth(month);\n    setIsOpen(!isOpen);\n  };\n  const onYearClick = year => {\n    setSelectedYear(year);\n    setIsOpenYear(!isOpenYear);\n  };\n\n  const years = [2023, 2022, 2021, 2020, 2019];\n  const months = useMemo(\n    () => [\n      'January',\n      'February',\n      'March',\n      'April',\n      'May',\n      'June',\n      'July',\n      'August',\n      'September',\n      'October',\n      'November',\n      'December',\n    ],\n    []\n  );\n  useEffect(() => {\n    console.log(selectedMonth, selectedYear);\n    const data = {\n      month: months.indexOf(selectedMonth) + 1,\n      year: selectedYear,\n    };\n    dispatch(fetchTransactionsSummary(data));\n  }, [dispatch, months, selectedMonth, selectedYear]);\n  return (\n    <div\n      style={{\n        display: 'flex',\n        gap: '32px',\n        marginTop: '60px',\n      }}\n    >\n      <div>\n        <SelectBtn onClick={() => setIsOpen(!isOpen)}>\n          <p\n          // style={{\n          //   display: 'inline-block',\n          // }}\n          >\n            {selectedMonth}\n          </p>\n          <SelectSvg>\n            {isOpen ? (\n              <use href={`${sprite}#arrow_up`} width={22} />\n            ) : (\n              <use href={`${sprite}#arrow_down`} width={22} />\n            )}\n          </SelectSvg>\n        </SelectBtn>\n        {isOpen && (\n          <Scrollbars\n            style={{\n              width: 181,\n              height: 157,\n              position: 'absolute',\n              zIndex: '2',\n              background:\n                'linear-gradient(0deg, rgba(83, 61, 186, 0.90) 0%, rgba(80, 48, 154, 0.90) 43.14%, rgba(106, 70, 165, 0.9) 73.27%, rgba(79, 46, 115, 0.8))',\n            }}\n          >\n            {months.map(month => (\n              <Options key={month} onClick={() => onMonthClick(month)}>\n                {month}\n              </Options>\n            ))}\n          </Scrollbars>\n        )}\n      </div>\n\n      <div>\n        <SelectBtn onClick={() => setIsOpenYear(!isOpenYear)}>\n          {selectedYear}\n          <SelectSvg>\n            {isOpenYear ? (\n              <use href={`${sprite}#arrow_up`} width={22} />\n            ) : (\n              <use href={`${sprite}#arrow_down`} width={22} />\n            )}\n          </SelectSvg>\n        </SelectBtn>\n        {isOpenYear && (\n          <Scrollbars\n            style={{\n              width: 181,\n              height: 157,\n              position: 'absolute',\n              zIndex: '2',\n              background:\n                'linear-gradient(0deg, rgba(83, 61, 186, 0.90) 0%, rgba(80, 48, 154, 0.90) 43.14%, rgba(106, 70, 165, 0.9) 73.27%, rgba(79, 46, 115, 0.8))',\n            }}\n          >\n            {years.map(year => (\n              <Options key={year} onClick={() => onYearClick(year)}>\n                {year}\n              </Options>\n            ))}\n          </Scrollbars>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default StatisticsDashboard;\n","import styled from 'styled-components';\nexport const TableTd = styled.td`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 16px;\n  font-size: 14px;\n  /* padding: 17px 20px; */\n  width: 395px;\n`;\nexport const TableTr = styled.tr`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border-bottom: 1px solid rgba(255, 255, 255, 0.41);\n  padding: 16px;\n`;\nexport const TableTrHead = styled.tr`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border-bottom: 1px solid rgba(255, 255, 255, 0.41);\n  padding: 16px;\n  margin-top: 20px;\n  font-family: Poppins;\n  font-size: 16px;\n  font-weight: 600;\n  max-width: 395px;\n  max-height: 56px;\n  border-radius: 8px;\n  background: rgba(82, 59, 126, 0.6);\n\n  box-shadow: 0px 4px 60px 0px rgba(0, 0, 0, 0.25);\n  backdrop-filter: blur(50px);\n`;\nexport const TableTh = styled.th`\n  /* padding: 16px; */\n  display: inline-block;\n`;\nexport const TableH3 = styled.h3`\n  margin-top: 200px;\n  font-size: 20px;\n  text-align: center;\n  line-height: normal;\n`;\nexport const TableBody = styled.tbody`\n  /* padding: 16px; */\n  display: flex;\n  flex-direction: column;\n  height: 490px;\n  width: 395px;\n  overflow-y: scroll;\n  &::-webkit-scrollbar-thumb {\n    background-color: rgba(82, 59, 126, 0.3);\n  }\n  &::-webkit-scrollbar-track {\n    box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);\n  }\n  &::-webkit-scrollbar {\n    width: 0.5em;\n  }\n`;\n","import React from 'react';\nimport {\n  TableTr,\n  TableTd,\n  TableTh,\n  TableTrHead,\n  TableBody,\n  TableH3,\n} from './StatisticsTable.styled';\nimport { useSelector } from 'react-redux';\n\nimport {\n  selectExpenseSummary,\n  selectIncomeSummary,\n} from 'redux/transactions/selectors';\nconst StatisticsTable = ({ categories, dataDoughnut }) => {\n  const income = useSelector(selectIncomeSummary);\n  const expense = useSelector(selectExpenseSummary);\n  return (\n    <div>\n      <table>\n        <thead>\n          <TableTrHead>\n            <TableTh>Category</TableTh>\n            <TableTh>Sum</TableTh>\n          </TableTrHead>\n        </thead>\n        <TableBody>\n          {categories.length > 1 ? (\n            categories.map(({ name, total }, index) => {\n              return (\n                <TableTr key={name}>\n                  <TableTd>\n                    <div\n                      style={{\n                        backgroundColor: `${dataDoughnut.datasets[0].backgroundColor[index]}`,\n                        width: '24px',\n                        height: '24px',\n                      }}\n                    ></div>\n                    {name}\n                  </TableTd>\n                  <td\n                    style={{\n                      fontSize: '14px',\n                    }}\n                  >\n                    {total < 0 ? -total : total}\n                  </td>\n                </TableTr>\n              );\n            })\n          ) : (\n            <TableH3>\n              It looks like you have not made any monetary transactions during\n              this time period\n            </TableH3>\n          )}\n        </TableBody>\n        <TableTr\n          style={{\n            border: 'none',\n          }}\n        >\n          <td>Expenses:</td>\n          <td\n            style={{\n              color: '#FF868D',\n            }}\n          >\n            {-expense}\n          </td>\n        </TableTr>\n        <TableTr\n          style={{\n            border: 'none',\n          }}\n        >\n          <td>Income:</td>\n          <td\n            style={{\n              color: '#FF868D',\n            }}\n          >\n            {income}\n          </td>\n        </TableTr>\n      </table>\n    </div>\n  );\n};\n\nexport default StatisticsTable;\n","import styled from 'styled-components';\n\nexport const StatisticDivMain = styled.div`\n  background: ${({ theme }) => theme.backgrounds.background};\n  color: white;\n  width: 803px;\n  height: 827px;\n  position: relative;\n  &::after {\n    content: '';\n    width: 893px;\n    height: 901px;\n    border-radius: 901px;\n    background: linear-gradient(\n      220deg,\n      rgba(109, 84, 235, 0.6) 28.31%,\n      rgba(101, 35, 146, 0.6) 66.76%\n    );\n    filter: blur(200px);\n    position: absolute;\n    left: 300px;\n    top: 200px;\n  }\n  &::before {\n    content: '';\n    width: 893px;\n    height: 901px;\n    border-radius: 366.105px;\n    background: #302e8e;\n\n    filter: blur(150px);\n    position: absolute;\n    left: 650px;\n    bottom: 500px;\n  }\n`;\nexport const StatisticDivChart = styled.div`\n  position: relative;\n  &::after {\n    content: '';\n    width: 330px;\n    height: 333px;\n    border-radius: 333px;\n    background: #6d1c77;\n    position: absolute;\n    left: 200px;\n    bottom: 0;\n\n    filter: blur(150px);\n  }\n`;\nexport const StatisticTitle = styled.h2`\n  color: ${({ theme }) => theme.colors.mainWhite};\n  text-align: left;\n  font-size: 30px;\n  font-weight: 400;\n`;\n","import Chart from 'components/Chart/Chart';\nimport StatisticsDashboard from 'components/StatisticsDashboard/StatisticsDashboard';\nimport StatisticsTable from 'components/StatisticsTable/StatisticsTable';\n\nimport { selectCategoriesSummary } from '../../redux/transactions/selectors';\n\nimport { useSelector } from 'react-redux';\nimport React, { useState } from 'react';\n\nimport {\n  StatisticDivChart,\n  StatisticDivMain,\n  StatisticTitle,\n} from './StatisticsTab.styled';\n\nconst StatisticsTab = () => {\n  const [isOpenMonth, setIsOpenMonth] = useState(false);\n  const [isOpenYear, setIsOpenYear] = useState(false);\n\n  const categories = useSelector(selectCategoriesSummary);\n  const categoriesValue = categories.map(({ total }) => {\n    if (total < 0) {\n      return -total;\n    }\n    return total;\n  });\n  const dataDoughnut = {\n    labels: [],\n    datasets: [\n      {\n        data: [...categoriesValue],\n        backgroundColor: [\n          'rgba(255, 2, 57, 0.991)',\n          'rgba(110, 120, 232, 1)',\n          'rgba(254, 208, 87, 1)',\n          'rgba(197, 186, 255, 1)',\n          'rgb(153, 102, 255)',\n          'rgb(255, 160, 64)',\n          'rgba(36, 204, 167, 1)',\n          'rgba(0, 173, 132, 1)',\n          'rgba(255, 216, 208, 1)',\n          'rgba(129, 225, 255, 1)',\n          'rgba(253, 148, 152, 1)',\n        ],\n        borderColor: [\n          'rgba(255, 2, 57, 0.991)',\n          'rgb(54, 163, 235)',\n          'rgb(255, 207, 86)',\n          'rgb(75, 192, 192)',\n          'rgb(153, 102, 255)',\n          'rgb(255, 160, 64)',\n          'rgb(0, 161, 70)',\n          'rgb(0, 76, 164)',\n          'rgb(206, 0, 155)',\n          'rgb(77, 255, 190)',\n          'rgb(255, 137, 137)',\n        ],\n        borderWidth: 1,\n      },\n    ],\n  };\n\n  return (\n    <StatisticDivMain\n      style={{\n        display: 'flex',\n        gap: '32px',\n        padding: '32px 16px 40px 69px',\n        justifyContent: 'space-between',\n        overflow: 'hidden',\n      }}\n      onClick={() => {\n        if (isOpenMonth) {\n          setIsOpenMonth(false);\n        } else if (isOpenYear) {\n          setIsOpenYear(false);\n        } else {\n          return;\n        }\n      }}\n    >\n      <StatisticDivChart\n        style={{\n          zIndex: '2',\n        }}\n      >\n        <StatisticTitle>Statistics</StatisticTitle>\n        <Chart dataDoughnut={dataDoughnut} categories={categories} />\n      </StatisticDivChart>\n      <div\n        style={{\n          zIndex: '3',\n        }}\n      >\n        <StatisticsDashboard\n          isOpen={isOpenMonth}\n          setIsOpen={setIsOpenMonth}\n          isOpenYear={isOpenYear}\n          setIsOpenYear={setIsOpenYear}\n        />\n        <StatisticsTable categories={categories} dataDoughnut={dataDoughnut} />\n      </div>\n    </StatisticDivMain>\n  );\n};\n\nexport default StatisticsTab;\n","// transactions\n\nexport const selectTransactions = state =>\n  state.transactions.transactions.items;\nexport const selectLoading = state => state.transactions.transactions.isLoading;\nexport const selectError = state => state.transactions.transactions.error;\nexport const selectCategories = state =>\n  state.transactions.transactions.categories;\n\n// summary\n\nexport const selectCategoriesSummary = state =>\n  state.transactions.summary.categoriesSummary;\nexport const selectIncomeSummary = state =>\n  state.transactions.summary.incomeSummary;\nexport const selectExpenseSummary = state =>\n  state.transactions.summary.expenseSummary;\nexport const selectPeriodTotal = state =>\n  state.transactions.summary.periodTotal;\nexport const selectYear = state => state.transactions.summary.year;\nexport const selectMonth = state => state.transactions.summary.month;\n"],"names":["ChartP","styled","p","_templateObject","_taggedTemplateLiteral","ChartJS","register","ArcElement","Tooltip","Legend","_ref","dataDoughnut","categories","periodTotal","useSelector","selectPeriodTotal","_jsx","style","width","height","marginTop","children","length","_jsxs","_Fragment","Doughnut","data","src","pngwing","alt","SelectBtn","button","SelectSvg","svg","_templateObject2","Options","_templateObject3","isOpen","setIsOpen","isOpenYear","setIsOpenYear","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","selectedMonth","setSelectedMonth","_useState3","_useState4","selectedYear","setSelectedYear","console","log","months","useMemo","useEffect","month","indexOf","year","fetchTransactionsSummary","display","gap","onClick","href","concat","sprite","Scrollbars","position","zIndex","background","map","onMonthClick","onYearClick","TableTd","td","TableTr","tr","TableTrHead","TableTh","th","_templateObject4","TableH3","h3","_templateObject5","TableBody","tbody","_templateObject6","income","selectIncomeSummary","expense","selectExpenseSummary","_ref2","index","name","total","backgroundColor","datasets","fontSize","border","color","StatisticDivMain","div","theme","backgrounds","StatisticDivChart","StatisticTitle","h2","colors","mainWhite","isOpenMonth","setIsOpenMonth","selectCategoriesSummary","categoriesValue","labels","_toConsumableArray","borderColor","borderWidth","padding","justifyContent","overflow","Chart","StatisticsDashboard","StatisticsTable","selectTransactions","state","transactions","items","selectLoading","isLoading","selectError","error","selectCategories","summary","categoriesSummary","incomeSummary","expenseSummary"],"sourceRoot":""}